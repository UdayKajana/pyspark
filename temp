class AttachArrivalTimestamp(beam.DoFn):
    def process(self, element):
        """Attaches the arrival timestamp to each element."""
        arrival_timestamp = datetime.now().timestamp()  # Get current timestamp in seconds
        yield beam.window.TimestampedValue(element, arrival_timestamp)

class PrepareSpannerData(beam.DoFn):
    def process(self, element, window=beam.DoFn.WindowParam) -> Iterator[ConvertToSpannerMutation]:
        try:
            # Access window information to generate a window timestamp
            window_start_utc = window.start.to_utc_datetime()
            
            # Format it as a string Spanner expects
            window_start_str = window_start_utc.strftime('%Y-%m-%dT%H:%M:%S.%fZ')

            # Transform the element and add window_timestamp
            mutation = self.transform_to_mutation(element)
            
            # If transformation was successful, add window timestamp and yield
            if mutation:
                yield mutation._replace(window_timestamp=window_start_str)
        except Exception as e:
            logging.error(f"Error processing element: {element}")
            logging.error(f"Error details: {str(e)}")
            return

    def transform_to_mutation(self, element: dict):
        if not isinstance(element, dict):
            logging.error(f"Expected dictionary, got {type(element)}")
            return None
            
        if 'rawdata' in element:
            try:
                if isinstance(element['rawdata'], str):
                    element = json.loads(element['rawdata'])
                elif isinstance(element['rawdata'], dict):
                    element = element['rawdata']
            except json.JSONDecodeError as e:
                logging.error(f"Error decoding rawdata: {str(e)}")
                return None

        current_time = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')

        return ConvertToSpannerMutation(
            telephone_number=element.get('telephone_number'),
            trouble_report_number=element.get('trouble_report_num'),
            address_id=element.get('address_id'),
            chronic_flag=element.get('chronic_flag'),
            chronic_total=element.get('chronic_total'),
            circuit_id=element.get('line_id_trimmed'),
            circuit_type=element.get('port_associated_service'),
            reported_ts=self.format_date(element.get('date_opened')),
            data_circuit_id=element.get('data_circuit_id'),
            video_circuit_id=self.safe_str(element.get('video_circuit_id')),
            window_timestamp=None,  # This will be populated in the process method
            insertion_timestamp=current_time  # Add Insertion timestamp
        )
