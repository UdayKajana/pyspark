# In the run() function, modify the pipeline as follows:

def run(known_args, beam_args):
    options = {
        'project': known_args.project,
        'runner': known_args.runner,
        'region': known_args.region,
        'staging_location': known_args.staging_location,
        'temp_location': known_args.temp_location,
        'template_location': known_args.template_location,
        'save_main_session': True,
        'streaming': True,
        'sdk_container_image': known_args.sdk_container_image,
        'sdk_location': 'container'
    }

    pipeline_options = PipelineOptions.from_dictionary(options)

    with beam.Pipeline(options=pipeline_options) as p:
        data = (p
            | "Read From Pubsub" >> ReadFromPubSub(
                subscription=f"{known_args.pubsub_subscription_name}",
                with_attributes=True,
                timestamp_attribute=None
            )
            | "Decode Avro" >> beam.ParDo(DecodeAvroRecords())
            | "Window Into Fixed Intervals" >> beam.WindowInto(
                beam.window.FixedWindows(120),
                trigger=AfterWatermark(
                    early=AfterProcessingTime(delay=beam.transforms.window.Duration(seconds=120)) | AfterCount(100),
                    late=AfterCount(1)
                ),
                allowed_lateness=beam.transforms.window.Duration(seconds=300),
                accumulation_mode=AccumulationMode.ACCUMULATING
            )
            | 'Prepare Spanner Data' >> beam.ParDo(PrepareSpannerData())
            | 'Add Key' >> beam.Map(lambda x: (1, x))  # Add a key for GroupByKey
            | 'Group Into Batches' >> beam.GroupByKey()
            | 'Ungroup' >> beam.FlatMap(lambda x: x[1])
        )

        _ = (data
            | "Write To Spanner" >> sp.SpannerInsertOrUpdate(
                instance_id=known_args.spanner_instance,
                database_id=known_args.spanner_dataset,
                project_id=known_args.spanner_project,
                table=known_args.spanner_table,
                expansion_service=known_args.expansion_service,
                max_number_mutations=7000,
                high_priority=True
            )
        )
