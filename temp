# [Previous imports and class definitions remain the same until the run function]

def run(known_args, beam_args):
    options = {
        'project': known_args.project,
        'runner': known_args.runner,
        'region': known_args.region,
        'staging_location': known_args.staging_location,
        'temp_location': known_args.temp_location,
        'template_location': known_args.template_location,
        'save_main_session': True,
        'streaming': True,
        'sdk_container_image': known_args.sdk_container_image,
        'sdk_location': 'container'
    }
    
    pipeline_options = PipelineOptions.from_dictionary(options)
    
    with beam.Pipeline(options=pipeline_options) as p:
        data = (p 
            | "Read From Pubsub" >> ReadFromPubSub(
                subscription=f"{known_args.pubsub_subscription_name}")
            | "Windowing" >> beam.WindowInto(beam.window.FixedWindows(2 * 60))
            | "Batch Elements" >> BatchElements(min_batch_size=100, max_batch_size=7000)
            | "Decode Avro" >> beam.ParDo(DecodeAvroRecords())
            | 'Prepare Spanner Data' >> beam.ParDo(PrepareSpannerData())
        )
        
        _ = (data
            | "Write To Spanner" >> sp.SpannerInsertOrUpdate(
                instance_id=known_args.spanner_instance,
                database_id=known_args.spanner_dataset,
                project_id=known_args.spanner_project,
                table=known_args.spanner_table,
                expansion_service=known_args.expansion_service,
                max_number_mutations=7000,
                high_priority=True
            )
        )

# [Rest of the code remains the same]
