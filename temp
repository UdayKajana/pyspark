from jinja2 import Environment, FileSystemLoader
import yaml
import os
import sys
from pathlib import Path

def validate_path(path, base_dir=None):
    try:
        resolved_path = os.path.abspath(os.path.realpath(path))

        # Prevent directory traversal if base_dir is provided
        if base_dir and not resolved_path.startswith(os.path.abspath(base_dir)):
            raise ValueError(f"Unauthorized access detected: {resolved_path}")

        if not os.path.exists(os.path.dirname(resolved_path)):
            raise ValueError(f"Directory does not exist: {os.path.dirname(resolved_path)}")
        
        return resolved_path
    except Exception as e:
        raise ValueError(f"Invalid path: {str(e)}")

def sanitize_filename(filename):
    valid_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-.')
    return ''.join(c for c in filename if c in valid_chars)

def create_dag_files(config_path, dag_files_path, project):
    try:
        BASE_DIR = Path(__file__).resolve().parent  # Ensure this is within a safe directory
        safe_config_path = validate_path(config_path, BASE_DIR)
        safe_dag_path = validate_path(dag_files_path, BASE_DIR)

        # Restrict template loading to the script's directory
        env = Environment(loader=FileSystemLoader(str(BASE_DIR)), autoescape=True)
        template = env.get_template('template.jinja2')

        with open(safe_config_path, "r") as configfile:
            config_data = yaml.safe_load(configfile)

            if project not in config_data:
                raise ValueError(f"Project {project} not found in config")

            markets = config_data[project][0]
            
            for x in markets:
                market = {
                    'market_name': sanitize_filename(x['market_name']),
                    'technologies': x['technologies'],
                    'recon_days': x['recon_days'],
                    'ds': '{{ data_interval_end.strftime("%Y-%m-%d") }}',
                    'ds_nodash': '{{ data_interval_end.strftime("%Y%m%d") }}',
                    'schedule': x['schedule'],
                    'is_exists': "{{ task_instance.xcom_pull(task_ids='market_file_exists_check_task', key='market_exists') }}"
                }

                safe_output_filename = f"dtwin_ran_invtry_nokia_{market['market_name']}.py"
                safe_output_path = os.path.join(safe_dag_path, safe_output_filename)

                # Prevent directory traversal attack
                if not os.path.abspath(safe_output_path).startswith(os.path.abspath(safe_dag_path)):
                    raise ValueError("Path traversal detected")

                with open(safe_output_path, 'w+') as f:
                    f.write(template.render(market))

    except Exception as e:
        raise RuntimeError(f"Error creating DAG files: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: script.py <config_path> <dag_files_path> <project>")
        sys.exit(1)

    try:
        config_path = str(sys.argv[1])
        dag_files_path = str(sys.argv[2])
        project = str(sys.argv[3])
        create_dag_files(config_path, dag_files_path, project)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
